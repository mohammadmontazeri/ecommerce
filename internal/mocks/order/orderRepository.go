// Code generated by mockery v2.38.0. DO NOT EDIT.

package ordermocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// OrderInterface is an autogenerated mock type for the OrderInterface type
type OrderInterface struct {
	mock.Mock
}

type OrderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderInterface) EXPECT() *OrderInterface_Expecter {
	return &OrderInterface_Expecter{mock: &_m.Mock}
}

// createOrder provides a mock function with given fields: c
func (_m *OrderInterface) createOrder(c *gin.Context) {
	_m.Called(c)
}

// OrderInterface_createOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createOrder'
type OrderInterface_createOrder_Call struct {
	*mock.Call
}

// createOrder is a helper method to define mock.On call
//   - c *gin.Context
func (_e *OrderInterface_Expecter) createOrder(c interface{}) *OrderInterface_createOrder_Call {
	return &OrderInterface_createOrder_Call{Call: _e.mock.On("createOrder", c)}
}

func (_c *OrderInterface_createOrder_Call) Run(run func(c *gin.Context)) *OrderInterface_createOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *OrderInterface_createOrder_Call) Return() *OrderInterface_createOrder_Call {
	_c.Call.Return()
	return _c
}

func (_c *OrderInterface_createOrder_Call) RunAndReturn(run func(*gin.Context)) *OrderInterface_createOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderInterface creates a new instance of OrderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderInterface {
	mock := &OrderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
