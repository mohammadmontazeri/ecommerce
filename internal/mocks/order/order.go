// Code generated by mockery v2.38.0. DO NOT EDIT.

package ordermocks

import (
	order "ecommerce/internal/order"

	mock "github.com/stretchr/testify/mock"
)

// QueryInterface is an autogenerated mock type for the QueryInterface type
type QueryInterface struct {
	mock.Mock
}

type QueryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryInterface) EXPECT() *QueryInterface_Expecter {
	return &QueryInterface_Expecter{mock: &_m.Mock}
}

// AddOrderToPivotTable provides a mock function with given fields: productsID, _a1
func (_m *QueryInterface) AddOrderToPivotTable(productsID []int, _a1 order.Order) error {
	ret := _m.Called(productsID, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderToPivotTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, order.Order) error); ok {
		r0 = rf(productsID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryInterface_AddOrderToPivotTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrderToPivotTable'
type QueryInterface_AddOrderToPivotTable_Call struct {
	*mock.Call
}

// AddOrderToPivotTable is a helper method to define mock.On call
//   - productsID []int
//   - _a1 order.Order
func (_e *QueryInterface_Expecter) AddOrderToPivotTable(productsID interface{}, _a1 interface{}) *QueryInterface_AddOrderToPivotTable_Call {
	return &QueryInterface_AddOrderToPivotTable_Call{Call: _e.mock.On("AddOrderToPivotTable", productsID, _a1)}
}

func (_c *QueryInterface_AddOrderToPivotTable_Call) Run(run func(productsID []int, _a1 order.Order)) *QueryInterface_AddOrderToPivotTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int), args[1].(order.Order))
	})
	return _c
}

func (_c *QueryInterface_AddOrderToPivotTable_Call) Return(_a0 error) *QueryInterface_AddOrderToPivotTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryInterface_AddOrderToPivotTable_Call) RunAndReturn(run func([]int, order.Order) error) *QueryInterface_AddOrderToPivotTable_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOrderWithoutProducts provides a mock function with given fields: _a0
func (_m *QueryInterface) InsertOrderWithoutProducts(_a0 order.Order) (order.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderWithoutProducts")
	}

	var r0 order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(order.Order) (order.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(order.Order) order.Order); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(order.Order)
	}

	if rf, ok := ret.Get(1).(func(order.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryInterface_InsertOrderWithoutProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrderWithoutProducts'
type QueryInterface_InsertOrderWithoutProducts_Call struct {
	*mock.Call
}

// InsertOrderWithoutProducts is a helper method to define mock.On call
//   - _a0 order.Order
func (_e *QueryInterface_Expecter) InsertOrderWithoutProducts(_a0 interface{}) *QueryInterface_InsertOrderWithoutProducts_Call {
	return &QueryInterface_InsertOrderWithoutProducts_Call{Call: _e.mock.On("InsertOrderWithoutProducts", _a0)}
}

func (_c *QueryInterface_InsertOrderWithoutProducts_Call) Run(run func(_a0 order.Order)) *QueryInterface_InsertOrderWithoutProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(order.Order))
	})
	return _c
}

func (_c *QueryInterface_InsertOrderWithoutProducts_Call) Return(_a0 order.Order, _a1 error) *QueryInterface_InsertOrderWithoutProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryInterface_InsertOrderWithoutProducts_Call) RunAndReturn(run func(order.Order) (order.Order, error)) *QueryInterface_InsertOrderWithoutProducts_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryInterface creates a new instance of QueryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryInterface {
	mock := &QueryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
