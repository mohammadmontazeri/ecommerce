// Code generated by mockery v2.38.0. DO NOT EDIT.

package productmocks

import (
	models "ecommerce/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// DeleteRow provides a mock function with given fields: product, productID
func (_m *ProductRepository) DeleteRow(product models.Product, productID int) error {
	ret := _m.Called(product, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Product, int) error); ok {
		r0 = rf(product, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_DeleteRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRow'
type ProductRepository_DeleteRow_Call struct {
	*mock.Call
}

// DeleteRow is a helper method to define mock.On call
//   - product models.Product
//   - productID int
func (_e *ProductRepository_Expecter) DeleteRow(product interface{}, productID interface{}) *ProductRepository_DeleteRow_Call {
	return &ProductRepository_DeleteRow_Call{Call: _e.mock.On("DeleteRow", product, productID)}
}

func (_c *ProductRepository_DeleteRow_Call) Run(run func(product models.Product, productID int)) *ProductRepository_DeleteRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product), args[1].(int))
	})
	return _c
}

func (_c *ProductRepository_DeleteRow_Call) Return(_a0 error) *ProductRepository_DeleteRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_DeleteRow_Call) RunAndReturn(run func(models.Product, int) error) *ProductRepository_DeleteRow_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: product, productID
func (_m *ProductRepository) GetProduct(product models.Product, productID int) (models.Product, error) {
	ret := _m.Called(product, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product, int) (models.Product, error)); ok {
		return rf(product, productID)
	}
	if rf, ok := ret.Get(0).(func(models.Product, int) models.Product); ok {
		r0 = rf(product, productID)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(models.Product, int) error); ok {
		r1 = rf(product, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductRepository_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - product models.Product
//   - productID int
func (_e *ProductRepository_Expecter) GetProduct(product interface{}, productID interface{}) *ProductRepository_GetProduct_Call {
	return &ProductRepository_GetProduct_Call{Call: _e.mock.On("GetProduct", product, productID)}
}

func (_c *ProductRepository_GetProduct_Call) Run(run func(product models.Product, productID int)) *ProductRepository_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product), args[1].(int))
	})
	return _c
}

func (_c *ProductRepository_GetProduct_Call) Return(_a0 models.Product, _a1 error) *ProductRepository_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProduct_Call) RunAndReturn(run func(models.Product, int) (models.Product, error)) *ProductRepository_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// InsertProduct provides a mock function with given fields: product
func (_m *ProductRepository) InsertProduct(product models.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for InsertProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_InsertProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertProduct'
type ProductRepository_InsertProduct_Call struct {
	*mock.Call
}

// InsertProduct is a helper method to define mock.On call
//   - product models.Product
func (_e *ProductRepository_Expecter) InsertProduct(product interface{}) *ProductRepository_InsertProduct_Call {
	return &ProductRepository_InsertProduct_Call{Call: _e.mock.On("InsertProduct", product)}
}

func (_c *ProductRepository_InsertProduct_Call) Run(run func(product models.Product)) *ProductRepository_InsertProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product))
	})
	return _c
}

func (_c *ProductRepository_InsertProduct_Call) Return(_a0 error) *ProductRepository_InsertProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_InsertProduct_Call) RunAndReturn(run func(models.Product) error) *ProductRepository_InsertProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRow provides a mock function with given fields: product, productID
func (_m *ProductRepository) UpdateRow(product models.Product, productID int) error {
	ret := _m.Called(product, productID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Product, int) error); ok {
		r0 = rf(product, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_UpdateRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRow'
type ProductRepository_UpdateRow_Call struct {
	*mock.Call
}

// UpdateRow is a helper method to define mock.On call
//   - product models.Product
//   - productID int
func (_e *ProductRepository_Expecter) UpdateRow(product interface{}, productID interface{}) *ProductRepository_UpdateRow_Call {
	return &ProductRepository_UpdateRow_Call{Call: _e.mock.On("UpdateRow", product, productID)}
}

func (_c *ProductRepository_UpdateRow_Call) Run(run func(product models.Product, productID int)) *ProductRepository_UpdateRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product), args[1].(int))
	})
	return _c
}

func (_c *ProductRepository_UpdateRow_Call) Return(_a0 error) *ProductRepository_UpdateRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_UpdateRow_Call) RunAndReturn(run func(models.Product, int) error) *ProductRepository_UpdateRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
