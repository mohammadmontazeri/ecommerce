// Code generated by mockery v2.38.0. DO NOT EDIT.

package ordermocks

import (
	models "ecommerce/models"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// AddOrderToPivotTable provides a mock function with given fields: productsID, order
func (_m *OrderRepository) AddOrderToPivotTable(productsID []int, order models.Order) error {
	ret := _m.Called(productsID, order)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderToPivotTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, models.Order) error); ok {
		r0 = rf(productsID, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_AddOrderToPivotTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrderToPivotTable'
type OrderRepository_AddOrderToPivotTable_Call struct {
	*mock.Call
}

// AddOrderToPivotTable is a helper method to define mock.On call
//   - productsID []int
//   - order models.Order
func (_e *OrderRepository_Expecter) AddOrderToPivotTable(productsID interface{}, order interface{}) *OrderRepository_AddOrderToPivotTable_Call {
	return &OrderRepository_AddOrderToPivotTable_Call{Call: _e.mock.On("AddOrderToPivotTable", productsID, order)}
}

func (_c *OrderRepository_AddOrderToPivotTable_Call) Run(run func(productsID []int, order models.Order)) *OrderRepository_AddOrderToPivotTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int), args[1].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_AddOrderToPivotTable_Call) Return(_a0 error) *OrderRepository_AddOrderToPivotTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_AddOrderToPivotTable_Call) RunAndReturn(run func([]int, models.Order) error) *OrderRepository_AddOrderToPivotTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrderProduct provides a mock function with given fields: orderID
func (_m *OrderRepository) DeleteOrderProduct(orderID int) error {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_DeleteOrderProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrderProduct'
type OrderRepository_DeleteOrderProduct_Call struct {
	*mock.Call
}

// DeleteOrderProduct is a helper method to define mock.On call
//   - orderID int
func (_e *OrderRepository_Expecter) DeleteOrderProduct(orderID interface{}) *OrderRepository_DeleteOrderProduct_Call {
	return &OrderRepository_DeleteOrderProduct_Call{Call: _e.mock.On("DeleteOrderProduct", orderID)}
}

func (_c *OrderRepository_DeleteOrderProduct_Call) Run(run func(orderID int)) *OrderRepository_DeleteOrderProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *OrderRepository_DeleteOrderProduct_Call) Return(_a0 error) *OrderRepository_DeleteOrderProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_DeleteOrderProduct_Call) RunAndReturn(run func(int) error) *OrderRepository_DeleteOrderProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRow provides a mock function with given fields: order, orderID
func (_m *OrderRepository) DeleteRow(order models.Order, orderID int) error {
	ret := _m.Called(order, orderID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Order, int) error); ok {
		r0 = rf(order, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_DeleteRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRow'
type OrderRepository_DeleteRow_Call struct {
	*mock.Call
}

// DeleteRow is a helper method to define mock.On call
//   - order models.Order
//   - orderID int
func (_e *OrderRepository_Expecter) DeleteRow(order interface{}, orderID interface{}) *OrderRepository_DeleteRow_Call {
	return &OrderRepository_DeleteRow_Call{Call: _e.mock.On("DeleteRow", order, orderID)}
}

func (_c *OrderRepository_DeleteRow_Call) Run(run func(order models.Order, orderID int)) *OrderRepository_DeleteRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order), args[1].(int))
	})
	return _c
}

func (_c *OrderRepository_DeleteRow_Call) Return(_a0 error) *OrderRepository_DeleteRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_DeleteRow_Call) RunAndReturn(run func(models.Order, int) error) *OrderRepository_DeleteRow_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderFromId provides a mock function with given fields: intQueryParameter
func (_m *OrderRepository) GetOrderFromId(intQueryParameter int) (models.Order, error) {
	ret := _m.Called(intQueryParameter)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderFromId")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Order, error)); ok {
		return rf(intQueryParameter)
	}
	if rf, ok := ret.Get(0).(func(int) models.Order); ok {
		r0 = rf(intQueryParameter)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(intQueryParameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrderFromId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderFromId'
type OrderRepository_GetOrderFromId_Call struct {
	*mock.Call
}

// GetOrderFromId is a helper method to define mock.On call
//   - intQueryParameter int
func (_e *OrderRepository_Expecter) GetOrderFromId(intQueryParameter interface{}) *OrderRepository_GetOrderFromId_Call {
	return &OrderRepository_GetOrderFromId_Call{Call: _e.mock.On("GetOrderFromId", intQueryParameter)}
}

func (_c *OrderRepository_GetOrderFromId_Call) Run(run func(intQueryParameter int)) *OrderRepository_GetOrderFromId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *OrderRepository_GetOrderFromId_Call) Return(_a0 models.Order, _a1 error) *OrderRepository_GetOrderFromId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrderFromId_Call) RunAndReturn(run func(int) (models.Order, error)) *OrderRepository_GetOrderFromId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderProducts provides a mock function with given fields: orderWithoutProduct
func (_m *OrderRepository) GetOrderProducts(orderWithoutProduct models.Order) ([]int, error) {
	ret := _m.Called(orderWithoutProduct)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderProducts")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Order) ([]int, error)); ok {
		return rf(orderWithoutProduct)
	}
	if rf, ok := ret.Get(0).(func(models.Order) []int); ok {
		r0 = rf(orderWithoutProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Order) error); ok {
		r1 = rf(orderWithoutProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrderProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderProducts'
type OrderRepository_GetOrderProducts_Call struct {
	*mock.Call
}

// GetOrderProducts is a helper method to define mock.On call
//   - orderWithoutProduct models.Order
func (_e *OrderRepository_Expecter) GetOrderProducts(orderWithoutProduct interface{}) *OrderRepository_GetOrderProducts_Call {
	return &OrderRepository_GetOrderProducts_Call{Call: _e.mock.On("GetOrderProducts", orderWithoutProduct)}
}

func (_c *OrderRepository_GetOrderProducts_Call) Run(run func(orderWithoutProduct models.Order)) *OrderRepository_GetOrderProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_GetOrderProducts_Call) Return(_a0 []int, _a1 error) *OrderRepository_GetOrderProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrderProducts_Call) RunAndReturn(run func(models.Order) ([]int, error)) *OrderRepository_GetOrderProducts_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOrderWithoutProducts provides a mock function with given fields: order
func (_m *OrderRepository) InsertOrderWithoutProducts(order models.Order) (models.Order, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderWithoutProducts")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Order) (models.Order, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(models.Order) models.Order); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(models.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_InsertOrderWithoutProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrderWithoutProducts'
type OrderRepository_InsertOrderWithoutProducts_Call struct {
	*mock.Call
}

// InsertOrderWithoutProducts is a helper method to define mock.On call
//   - order models.Order
func (_e *OrderRepository_Expecter) InsertOrderWithoutProducts(order interface{}) *OrderRepository_InsertOrderWithoutProducts_Call {
	return &OrderRepository_InsertOrderWithoutProducts_Call{Call: _e.mock.On("InsertOrderWithoutProducts", order)}
}

func (_c *OrderRepository_InsertOrderWithoutProducts_Call) Run(run func(order models.Order)) *OrderRepository_InsertOrderWithoutProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order))
	})
	return _c
}

func (_c *OrderRepository_InsertOrderWithoutProducts_Call) Return(_a0 models.Order, _a1 error) *OrderRepository_InsertOrderWithoutProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_InsertOrderWithoutProducts_Call) RunAndReturn(run func(models.Order) (models.Order, error)) *OrderRepository_InsertOrderWithoutProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderRow provides a mock function with given fields: input, orderID
func (_m *OrderRepository) UpdateOrderRow(input models.Order, orderID int) (models.Order, error) {
	ret := _m.Called(input, orderID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderRow")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Order, int) (models.Order, error)); ok {
		return rf(input, orderID)
	}
	if rf, ok := ret.Get(0).(func(models.Order, int) models.Order); ok {
		r0 = rf(input, orderID)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(models.Order, int) error); ok {
		r1 = rf(input, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_UpdateOrderRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderRow'
type OrderRepository_UpdateOrderRow_Call struct {
	*mock.Call
}

// UpdateOrderRow is a helper method to define mock.On call
//   - input models.Order
//   - orderID int
func (_e *OrderRepository_Expecter) UpdateOrderRow(input interface{}, orderID interface{}) *OrderRepository_UpdateOrderRow_Call {
	return &OrderRepository_UpdateOrderRow_Call{Call: _e.mock.On("UpdateOrderRow", input, orderID)}
}

func (_c *OrderRepository_UpdateOrderRow_Call) Run(run func(input models.Order, orderID int)) *OrderRepository_UpdateOrderRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order), args[1].(int))
	})
	return _c
}

func (_c *OrderRepository_UpdateOrderRow_Call) Return(_a0 models.Order, _a1 error) *OrderRepository_UpdateOrderRow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_UpdateOrderRow_Call) RunAndReturn(run func(models.Order, int) (models.Order, error)) *OrderRepository_UpdateOrderRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
